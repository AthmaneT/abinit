#!/usr/bin/env python
#
# Copyright (C) 2011-2012 ABINIT Group (Yann Pouillon)
#
# This file is part of the ABINIT software package. For license information,
# please see the COPYING file in the top-level directory of the ABINIT source
# distribution.
#

from ConfigParser import ConfigParser
from time import gmtime,strftime

import os
import re
import sys

class MyConfigParser(ConfigParser):

  def optionxform(self,option):
    return str(option)



# ---------------------------------------------------------------------------- #

#
# Main program
#

# Initial setup
my_name     = "make-data-doc"
my_config   = "config/specs/buildsys.conf"
my_macro    = "config/m4/auto-doc.m4"
my_makefile = "Makefile.am"

# Check if we are in the top of the ABINIT source tree
if ( not os.path.exists("configure.ac") or
     not os.path.exists("src/98_main/abinit.F90") ):
  print "%s: You must be in the top of an ABINIT source tree." % my_name
  print "%s: Aborting now." % my_name
  sys.exit(1)

# Check if we have a config file
if ( os.path.exists(my_config) ):
  cnf = MyConfigParser()
  cnf.read(my_config)
else:
  print "%s: Could not find config file (%s)." % (my_name,my_config)
  print "%s: Aborting now." % my_name
  sys.exit(2)

# What time is it?
now = strftime("%Y/%m/%d %H:%M:%S +0000",gmtime())

# Init macro
doc_macro = """\
# Generated by %s on %s

#
# ABINIT Documentation support for the "configure" script
#

#
# IMPORTANT NOTE
#
# This file has been automatically generated by the %s
# script. If you try to edit it, your changes will systematically be
# overwritten.
#



# ABI_DOC_INIT()
# --------------
#
# Defines whether the Abinit Documentation may be built along with the package.
#
AC_DEFUN([ABI_DOC_INIT],[
  dnl Init
  abi_doc_mode="@DOC_MODE@"
@DOC_INIT@

  case "${abi_doc_mode}" in
    data)
      AC_MSG_NOTICE([the Abinit Documentation will never be built])
      ;;
    subsystem)
      AC_MSG_NOTICE([the Abinit Documentation may be built upon request])
      ;;
  esac

  AM_CONDITIONAL([DO_BUILD_DOC],[test "${enable_doc_build}" = "yes"])
]) # ABI_DOC_INIT
""" % (my_name,now,my_name)

# Extract information from config file
doc_mode = cnf.get("doc","mode")

# Generate Autoconf macro
if ( doc_mode == "data" ):
  doc_init = "  AC_CONFIG_FILES([doc/Makefile])"
elif ( doc_mode == "subsystem" ):
  doc_init = "  AC_CONFIG_SUBDIRS([doc])\n"

doc_macro = re.sub("@DOC_MODE@",doc_mode,doc_macro)
doc_macro = re.sub("@DOC_INIT@",doc_init,doc_macro)
file(my_macro,"w").write(doc_macro)

# Generate makefile snippets
file(my_makefile,"a").write("\nSUBDIRS += doc\n")
if ( doc_mode == "data" ):
  os.system("cd doc && ./wipeout.sh >/dev/null 2>&1")
  os.system("./config/scripts/make-makefiles-doc")
elif ( doc_mode == "subsystem" ):
  os.system("cd doc && ./autogen.sh >/dev/null 2>&1")

# -*- Autoconf -*-
#
# Copyright (C) 2011 Abinit Group (Yann Pouillon)
#
# This file is part of the Abinit software package. For license information,
# please see the COPYING file in the top-level directory of the Abinit source
# distribution.
#

# ---------------------------------------------------------------------------- #

#
# IMPORTANT NOTE
#
# Please DO NOT EDIT this file unless you REALLY know what you are doing.
# Everything is important, in particular the order of the various commands
# executed here. YOU HAVE BEEN WARNED !
#

# ---------------------------------------------------------------------------- #

#
# Autoconf & Automake startup
#

# Initialize Autoconf
AC_PREREQ(2.62)
AC_INIT([Abinit-GUI],[0.1],[https://bugs.launchpad.net/abinit/],[abinit-gui])
AC_REVISION([Autotools support for the GUI of Abinit 6])
AC_CONFIG_AUX_DIR(gnu)
AC_CONFIG_SRCDIR(src/Main.java)

# ---------------------------------------------------------------------------- #

#
# Options
#

AC_ARG_ENABLE([gui-build],
  AC_HELP_STRING([--enable-gui-build],
    [Allow the build of Java sources (default: yes)]))
AC_SUBST(enable_gui_build)
if test "${enable_gui_build}" = ""; then
  enable_gui_build="yes"
fi

# ---------------------------------------------------------------------------- #

#
# Startup
#

# Init project parameters
gui_build_source="no"
gui_objdir="Prog"
gui_progname="AbinitGUI"

AC_SUBST(gui_build_source)
AC_SUBST(gui_objdir)
AC_SUBST(gui_progname)

# Initial setup
AC_CANONICAL_TARGET
AM_INIT_AUTOMAKE(1.10)

# Check for common programs
AC_PROG_MAKE_SET
AC_PROG_INSTALL
AC_PROG_LN_S
AC_PROG_SED
AC_PROG_AWK
AC_PROG_GREP

# Workaround for the "grep -e" issue on Solaris systems
AC_PROG_EGREP

# Workaround for "mkdir -p" on Mac systems
ABI_PROG_MKDIR_P

# Check for various programs
AC_PATH_PROG(BOURNE_SHELL,sh,/bin/sh)
AC_PATH_PROG(MV,mv,/bin/false)
AC_PATH_PROG(PERL,perl,/bin/false)
AC_PATH_PROG(RM,rm,/bin/false)

# ---------------------------------------------------------------------------- #

#
# Java support
#

# Init Java environment variables
AC_ARG_VAR([JAVACFLAGS],[Java compiler flags])
AC_SUBST(JAVACFLAGS)
if test "${JAVACFLAGS}" = ""; then
  JAVACFLAGS="-nowarn -O -verbose -classpath ${gui_objdir}"
fi

AC_ARG_VAR([JARFLAGS],[Java archiver flags])
AC_SUBST(JARFLAGS)
if test "${JARFLAGS}" = ""; then
  JARFLAGS="-cfe0"
fi

if test "${enable_gui_build}" = "yes"; then

  # Look for a complete JDK
  AX_CHECK_CLASSPATH
  AX_PROG_JAVAC([javac jikes "gcj -C" guavac])
  AX_PROG_JAVA([java kaffe])
  AX_PROG_JAR

  # Check the Java implementation
  ABI_JAVA_CHECK_OVERRIDE

  # Decide whether to build the GUI
  if test "${JAVAC}" != "" -a \
          "${JAR}" != "" -a \
          "${JAVA}" != "" -a \
          "${abi_java_override}" = "yes"; then
    gui_build_source="yes"
  fi

fi

AM_CONDITIONAL([DO_BUILD_GUI],[test "${gui_build_source}" = "yes"])

# ---------------------------------------------------------------------------- #

#
# Final output
#

# Create directories
${MKDIR_P} src/${gui_objdir}

# Create makefiles
AC_OUTPUT([
  Makefile 
  src/Makefile
  src/abinitgui/Makefile
  src/com/Makefile
  src/com/jcraft/Makefile
  src/com/jcraft/jsch/Makefile
  src/com/jcraft/jzlib/Makefile
  src/org/Makefile
  src/org/jdesktop/Makefile
  src/org/jdesktop/layout/Makefile
  src/org/jdom/Makefile
  src/org/jdom/adapters/Makefile
  src/org/jdom/filter/Makefile
  src/org/jdom/input/Makefile
  src/org/jdom/output/Makefile
  src/org/jdom/transform/Makefile
  tests/Makefile])

# Print summary
AC_MSG_NOTICE([Configuration summary:])
AC_MSG_NOTICE([])
AC_MSG_NOTICE([  * JAVAC      = ${JAVAC}])
AC_MSG_NOTICE([  * JAVACFLAGS = ${JAVACFLAGS}])
AC_MSG_NOTICE([  * JAR        = ${JAR}])
AC_MSG_NOTICE([  * JARFLAGS   = ${JARFLAGS}])
AC_MSG_NOTICE([  * JAVA       = ${JAVA}])
AC_MSG_NOTICE([])
AC_MSG_NOTICE([  * build source: ${gui_build_source}])
AC_MSG_NOTICE([])
